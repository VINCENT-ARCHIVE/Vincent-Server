name: Vincent Production CI/CD
on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test --warning-mode all

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (main branch)
        if: github.ref == 'refs/heads/release'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            DB_URL=${{ secrets.PROD_DB_URL }}
            DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
            DB_PASS=${{ secrets.PROD_DB_PASS }}
            JWT_TOKEN_SECRET=${{ secrets.PROD_JWT_TOKEN_SECRET }}
            BUCKET_NAME=${{ secrets.PROD_BUCKET_NAME }}
            BUCKET_ACCESS_KEY=${{ secrets.PROD_BUCKET_ACCESS_KEY }}
            BUCKET_SECRET_KEY=${{ secrets.PROD_BUCKET_SECRET_KEY }}
            REDIS_HOST=${{ secrets.PROD_REDIS_HOST }}
            REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
          tags: ${{ secrets.DOCKER_USERNAME }}/vincent:prod-latest

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'
    steps:
      - name: Docker Compose on EC2 (Production Server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd ~/project
            ls -l
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/vincent:prod-latest
            sudo docker-compose up -d --no-deps --build springboot
            sudo docker image prune -f
